[tool.poetry]
authors = ["ZhengYu, Xu <zen-xu@outlook.com>"]
description = "Python Language's Another Nonpareil remote Debugger"
name = "plan-d"
readme = "README.md"
version = "0.2.2" # version anchor
license = "MIT"
keywords = ["debugger", "remote", "ipython"]
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Debuggers",
]

[tool.poetry.dependencies]
python         = "^3.8"
madbg          = "^1.3.2"
click          = "^8.1.7"
ipython        = "^8"
prompt-toolkit = "^3"
rich           = ">=13"

[tool.poetry.group.test.dependencies]
mypy       = { version = "^1.9", python = "^3.10" }
nox        = "^2024.4.15"
pytest     = "<8.0"
pytest-cov = "^4.1.0"
commitizen = "^3.28"

[tool.poetry.scripts]
plan-d = 'plan_d.__main__:cli'

[build-system]
build-backend = "poetry.core.masonry.api"
requires      = ["poetry-core"]

[tool.commitizen]
bump_message   = "chore(release): bump version $current_version -> $new_version"
pre_bump_hooks = ["./update-changelog.sh"]
version        = "0.2.2"                                                       # version anchor
version_files  = ["pyproject.toml:version anchor", "plan_d/__init__.py"]

[tool.ruff]
extend-exclude = [
  "docs/*",
  # External to the project's coding standards
  "tests/**/fixtures/*",
]
fix = true
line-length = 88
target-version = "py38"

[tool.ruff.lint]
extend-select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "ERA", # flake8-eradicate/eradicate
  "I",   # isort
  "N",   # pep8-naming
  "PIE", # flake8-pie
  "PGH", # pygrep
  "RUF", # ruff checks
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
]

[tool.ruff.lint.isort]
known-first-party   = ["plan_d"]
lines-after-imports = 2
lines-between-types = 1
required-imports    = ["from __future__ import annotations"]

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
explicit_package_bases = true
files                  = "plan_d"
namespace_packages     = true
show_error_codes       = true
disable_error_code     = ["import-not-found", "import-untyped"]
